swagger: '2.0'
info:
  description: This is a virtual library server
  version: 1.0.0
  title: Library
  contact:
    name: Dawid GÄ…bka
    email: dgabka@griddynamics.com
host: 'localhost:8080'
basePath: /virtual-library-ws
tags:
- name: books
  description: Book API
- name: orders
  description: Orders API
- name: users
  description: Users API
consumes:
- application/xml
- application/json
produces:
- application/xml
- application/json
paths:
  /books:
    get:
      tags:
      - books
      summary: Get all books
      operationId: getAllUsingGET
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        type: integer
        default: 0
        format: int32
      - name: limit
        in: query
        description: Number of results on a single page
        required: false
        type: integer
        default: 3
        format: int32
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/BookRest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /books/:
    get:
      tags:
      - books
      summary: Find book by title
      operationId: findByTitleUsingGET
      parameters:
      - name: find
        in: query
        description: Fragment of a title to perform a search action by
        required: false
        type: string
      - name: page
        in: query
        description: Page number
        required: false
        type: integer
        default: 0
        format: int32
      - name: limit
        in: query
        description: Number of results on a single page
        required: false
        type: integer
        default: 3
        format: int32
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/BookRest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/books/{isbn}':
    get:
      tags:
      - books
      summary: Get book
      operationId: getBookUsingGET
      parameters:
      - name: isbn
        in: path
        description: ISBN of a book
        required: true
        type: string
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/BookRest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /orders:
    post:
      tags:
      - orders
      summary: Create order
      operationId: createOrderUsingPOST
      parameters:
      - in: body
        name: order
        description: Order object to be created
        required: true
        schema:
          $ref: '#/definitions/OrderRequestModel'
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/UserRest'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /orders/gift:
    post:
      tags:
      - orders
      summary: Gift book
      operationId: giftOrderUsingPOST
      parameters:
      - in: body
        name: order
        description: Order object to be gifted
        required: true
        schema:
          $ref: '#/definitions/OrderRequestModel'
      - name: to
        in: query
        description: Username of the user to be gifted
        required: true
        type: string
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/UserRest'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /orders/read:
    put:
      tags:
      - orders
      summary: Save reading progress
      operationId: addReadingProgressUsingPUT
      parameters:
      - in: body
        name: order
        description: Order object to be updated
        required: true
        schema:
          $ref: '#/definitions/OrderRequestModel'
      - name: 'no'
        in: query
        description: Most recent page number
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/UserRest'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /users:
    post:
      tags:
      - users
      summary: Create user
      operationId: createUser
      parameters:
      - in: body
        name: userDetails
        description: User object to be created
        required: true
        schema:
          $ref: '#/definitions/UserDetailsRequestModel'
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/UserRest'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/users/{id}':
    get:
      tags:
      - users
      summary: Get user by id
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: Public id of the user
        required: true
        type: string
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/UserRest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
      - users
      summary: Update user details
      operationId: Update user
      parameters:
      - name: id
        in: path
        description: Public id of the user
        required: true
        type: string
      - in: body
        name: userDetailsRequestModel
        description: User object to be updated
        required: true
        schema:
          $ref: '#/definitions/UserDetailsRequestModel'
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/UserRest'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/users/{username}/favorites':
    get:
      tags:
      - users
      summary: List of user's favourite genres
      operationId: getFavouriteGenres
      parameters:
      - name: username
        in: path
        description: Username of the user
        required: true
        type: string
      responses:
        '200':
          description: Operation successful
          schema:
            $ref: '#/definitions/UserRest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
definitions:
  AuthorRest:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
    title: AuthorRest
  BookRest:
    type: object
    properties:
      author:
        $ref: '#/definitions/AuthorRest'
      isbn:
        type: string
      pages:
        type: integer
        format: int32
      price:
        type: number
        format: double
      publicationYear:
        type: integer
        format: int32
      title:
        type: string
    title: BookRest
  GenreRest:
    type: object
    properties:
      genre:
        type: string
    title: GenreRest
  OrderRequestModel:
    type: object
    properties:
      isbn:
        type: string
      username:
        type: string
    title: OrderRequestModel
  OrderRest:
    type: object
    properties:
      bookRest:
        $ref: '#/definitions/BookRest'
      purchaseDate:
        $ref: '#/definitions/Timestamp'
      readingProgress:
        type: number
        format: float
      userRest:
        $ref: '#/definitions/UserRest'
    title: OrderRest
  Timestamp:
    type: object
    properties:
      date:
        type: integer
        format: int32
      day:
        type: integer
        format: int32
      hours:
        type: integer
        format: int32
      minutes:
        type: integer
        format: int32
      month:
        type: integer
        format: int32
      nanos:
        type: integer
        format: int32
      seconds:
        type: integer
        format: int32
      time:
        type: integer
        format: int64
      timezoneOffset:
        type: integer
        format: int32
      year:
        type: integer
        format: int32
    title: Timestamp
  UserDetailsRequestModel:
    type: object
    properties:
      accountBalance:
        type: number
        format: double
      age:
        type: integer
        format: int32
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
        enum:
        - MALE
        - FEMALE
        - OTHER
        - RATHER_NOT_SAY
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    title: UserDetailsRequestModel
  UserRest:
    type: object
    properties:
      accountBalance:
        type: number
        format: double
      age:
        type: integer
        format: int32
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
        enum:
        - MALE
        - FEMALE
        - OTHER
        - RATHER_NOT_SAY
      lastName:
        type: string
      publicUserId:
        type: string
      username:
        type: string
    title: UserRest
